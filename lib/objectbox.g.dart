// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/model/folder_model.dart';
import 'src/model/note_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 4271254259516459972),
    name: 'Note',
    lastPropertyId: const obx_int.IdUid(15, 6381643805788932181),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7929171824297164452),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3048908310242877530),
        name: 'uuid',
        type: 9,
        flags: 2080,
        indexId: const obx_int.IdUid(3, 8221884267203418016),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6524839013607695808),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 6821778788273882308),
        name: 'dateCreated',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 2562786562007846218),
        name: 'lastestModified',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 6882280431038526721),
        name: 'content',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 6381643805788932181),
        name: 'previewContent',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(7, 803764365636331852),
    name: 'FolderModel',
    lastPropertyId: const obx_int.IdUid(4, 4222835027701047970),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7442030417774950137),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7604553850537347311),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4894203926291146665),
        name: 'noteInclude',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4222835027701047970),
        name: 'uuid',
        type: 9,
        flags: 2080,
        indexId: const obx_int.IdUid(2, 2952101781438589726),
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(7, 803764365636331852),
    lastIndexId: const obx_int.IdUid(3, 8221884267203418016),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [
      3783086095446467721,
      3472751663052211731,
      7148833971392364869,
      798849588595128635,
      3609905975199727364,
    ],
    retiredIndexUids: const [8886481823602368204],
    retiredPropertyUids: const [
      3746548991287989143,
      3554903239812527647,
      1563845634396877680,
      8646504964849126209,
      4479470878023695645,
      3223730262280662396,
      804997602003466515,
      2255952006371592749,
      4440773303607715772,
      7891999565617989967,
      318723143211764557,
      2934411921304287526,
      2370610704186196335,
      2382916142957779532,
      8538116728784453377,
      7826337761453954687,
      1603524207106424051,
      3880866559083599098,
      6612643472357328315,
      2712647120158568224,
      1317573008996102148,
      150050851376199891,
      5168289259717824277,
      6069513165378626507,
      1966642670325292921,
      3110496900558503241,
      1549105256777534732,
      5316681461974377569,
      3551947636204397678,
      1381133535795069735,
      493215236131655716,
      6209204083061683773,
      763734887088423762,
      7665380459296939238,
      4081382284707450781,
      5045664895887237276,
      1234735489074752688,
      107140961531475377,
      7527307426686352931,
      3694927225866095609,
      8811746142163413985,
      6019034536151155963,
    ],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Note: obx_int.EntityDefinition<Note>(
      model: _entities[0],
      toOneRelations: (Note object) => [],
      toManyRelations: (Note object) => {},
      getId: (Note object) => object.id,
      setId: (Note object, int id) {
        object.id = id;
      },
      objectToFB: (Note object, fb.Builder fbb) {
        final uuidOffset = fbb.writeString(object.uuid);
        final titleOffset = fbb.writeString(object.title);
        final contentOffset = fbb.writeString(object.content);
        final previewContentOffset = fbb.writeString(object.previewContent);
        fbb.startTable(16);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, uuidOffset);
        fbb.addOffset(3, titleOffset);
        fbb.addInt64(7, object.dateCreated.millisecondsSinceEpoch);
        fbb.addInt64(11, object.lastestModified.millisecondsSinceEpoch);
        fbb.addOffset(12, contentOffset);
        fbb.addOffset(14, previewContentOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final uuidParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final contentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 28, '');
        final previewContentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 32, '');
        final dateCreatedParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
        );
        final lastestModifiedParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0),
        );
        final object = Note(
          id: idParam,
          uuid: uuidParam,
          title: titleParam,
          content: contentParam,
          previewContent: previewContentParam,
          dateCreated: dateCreatedParam,
          lastestModified: lastestModifiedParam,
        );

        return object;
      },
    ),
    FolderModel: obx_int.EntityDefinition<FolderModel>(
      model: _entities[1],
      toOneRelations: (FolderModel object) => [],
      toManyRelations: (FolderModel object) => {},
      getId: (FolderModel object) => object.id,
      setId: (FolderModel object, int id) {
        object.id = id;
      },
      objectToFB: (FolderModel object, fb.Builder fbb) {
        final titleOffset = fbb.writeString(object.title);
        final noteIncludeOffset = fbb.writeString(object.noteInclude);
        final uuidOffset = fbb.writeString(object.uuid);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, titleOffset);
        fbb.addOffset(2, noteIncludeOffset);
        fbb.addOffset(3, uuidOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final noteIncludeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final uuidParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final object = FolderModel(
          id: idParam,
          title: titleParam,
          noteInclude: noteIncludeParam,
          uuid: uuidParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Note] entity fields to define ObjectBox queries.
class Note_ {
  /// See [Note.id].
  static final id = obx.QueryIntegerProperty<Note>(_entities[0].properties[0]);

  /// See [Note.uuid].
  static final uuid = obx.QueryStringProperty<Note>(_entities[0].properties[1]);

  /// See [Note.title].
  static final title = obx.QueryStringProperty<Note>(
    _entities[0].properties[2],
  );

  /// See [Note.dateCreated].
  static final dateCreated = obx.QueryDateProperty<Note>(
    _entities[0].properties[3],
  );

  /// See [Note.lastestModified].
  static final lastestModified = obx.QueryDateProperty<Note>(
    _entities[0].properties[4],
  );

  /// See [Note.content].
  static final content = obx.QueryStringProperty<Note>(
    _entities[0].properties[5],
  );

  /// See [Note.previewContent].
  static final previewContent = obx.QueryStringProperty<Note>(
    _entities[0].properties[6],
  );
}

/// [FolderModel] entity fields to define ObjectBox queries.
class FolderModel_ {
  /// See [FolderModel.id].
  static final id = obx.QueryIntegerProperty<FolderModel>(
    _entities[1].properties[0],
  );

  /// See [FolderModel.title].
  static final title = obx.QueryStringProperty<FolderModel>(
    _entities[1].properties[1],
  );

  /// See [FolderModel.noteInclude].
  static final noteInclude = obx.QueryStringProperty<FolderModel>(
    _entities[1].properties[2],
  );

  /// See [FolderModel.uuid].
  static final uuid = obx.QueryStringProperty<FolderModel>(
    _entities[1].properties[3],
  );
}
